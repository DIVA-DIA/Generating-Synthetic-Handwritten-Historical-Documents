#!/usr/bin/python3
import torchvision

import wandb

from numpy.random import rand
import argparse
import itertools

import torchvision.transforms as transforms
from torch.utils.data import DataLoader
from torch.autograd import Variable
from PIL import Image
import torch
import pytorch_ssim
from models import Generator
from models import Discriminator
from utils import ReplayBuffer
from utils import LambdaLR
from utils import Logger
from utils import weights_init_normal

import PIL
from PIL import Image
from HTR_ctc.train_code.train_htr import *
from HTR_ctc.train_code.config import *
from HTR_ctc.generated_data_loader.generated_utils import *
from HTR_ctc.generated_data_loader.generated_loader import *

from datasets import ImageDataset

class AddGaussianNoise(object):
    def __init__(self, mean=0., std=1.):
        self.std = std
        self.mean = mean

    def __call__(self, tensor):
        curr_tens = tensor + torch.randn(tensor.size()) * self.std + self.mean
        return torch.where(curr_tens > 1.0, torch.ones(curr_tens.size()), torch.where(curr_tens < 0.0, torch.zeros(curr_tens.size()), curr_tens))

    def __repr__(self):
        return self.__class__.__name__ + '(mean={0}, std={1})'.format(self.mean, self.std)

parser = argparse.ArgumentParser()
parser.add_argument('--epoch', type=int, default=0, help='starting epoch')
parser.add_argument('--n_epochs', type=int, default=201, help='number of epochs of training')
parser.add_argument('--batchSize', type=int, default=1, help='size of the batches')
parser.add_argument('--dataroot', type=str, default='datasets/horse2zebra/', help='root directory of the dataset')
parser.add_argument('--optimizer_lr', type=float, default=0.0002, help='initial learning rate of optimizers')
parser.add_argument('--decay_epoch', type=int, default=100, help='epoch to start linearly decaying the learning rate to 0')
parser.add_argument('--size', type=int, default=256, help='size of the data crop (squared assumed)')
parser.add_argument('--input_nc', type=int, default=3, help='number of channels of input data')
parser.add_argument('--output_nc', type=int, default=3, help='number of channels of output data')
parser.add_argument('--cuda', default='True', action='store_true', help='use GPU computation')
parser.add_argument('--n_cpu', type=int, default=8, help='number of cpu threads to use during batch generation')
parser.add_argument('--rd_lr', type=float, default=0.0000001, help='Learning rate of reading discriminator')
parser.add_argument('--identity_loss_factor_A', type=float, default=5.0, help='Multiplication factor of the identity loss in A')
parser.add_argument('--identity_loss_factor_B', type=float, default=5.0, help='Multiplication factor of the identity loss in B')
parser.add_argument('--gan_loss_factor_B2A', type=float, default=1.0, help='Multiplication factor of the GAN loss from B to A')
parser.add_argument('--gan_loss_factor_A2B', type=float, default=1.0, help='Multiplication factor of the GAN loss from A to B')
parser.add_argument('--cycle_loss_factor_A', type=float, default=10.0, help='Multiplication factor of the cycle loss of A')
parser.add_argument('--cycle_loss_factor_B', type=float, default=10.0, help='Multiplication factor of the cycle loss of B')
parser.add_argument('--rd_loss_factor_B', type=float, default=2.5, help='Multiplication factor of the reading discriminator loss')
parser.add_argument('--rd_loss_factor_A', type=float, default=2.5, help='Multiplication factor of the reading discriminator loss')
parser.add_argument('--load_last_model', type=bool, default=False, help='Loading the model parameters of the last run')
parser.add_argument('--use_rd', type=bool, default=False, help='The reading discriminator is used')
parser.add_argument('--use_rd_A', type=bool, default=False, help='The second reading discriminator is used')
parser.add_argument('--rd_low_loss_learn', type=bool, default=False, help='The reading discriminator only learns on low losses to prevent learning texts that looks too different')
parser.add_argument('--cycleloss_function', choices=['L1', 'SSIM'], default='L1', help='Loss function for the cycle loss')
parser.add_argument('--source_dataset', choices=['EG-old', 'EG-BG-LC-old', 'EG', 'EG-LC', 'EG-BG', 'EG-BG-LC'], default='EG-BG-LC', help='Which source dataset to pick')
parser.add_argument('--target_dataset', choices=['B', 'saintgall'], default='saintgall', help='Which target dataset to pick')
parser.add_argument('--rd_pretrain_load', choices=[None, 'IAM.pt', 'GEN_EG_BG_LC.pt', 'GEN_EG_BG.pt', 'clean_rd_10.pt'], default=None, help='Which pretraining for reading discriminator to use')
parser.add_argument('--noise', type=float, default=0.05, help='Amount of gaussian noise')
parser.add_argument('--regenerate', type=bool, default=False, help='Decides if all source crops are regenerated every epoch')
parser.add_argument('--resetRD', type=bool, default=False, help='Resets the reading discriminator after 10 epochs')


opt = parser.parse_args()
print(opt)
save_number = random.randint(0, 99999999)
os.mkdir('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number))
os.mkdir('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number) + '/best')

if torch.cuda.is_available() and not opt.cuda:
    print("WARNING: You have a CUDA device, so you should probably run with --cuda")

###### Definition of variables ######
# Parameters
use_rd = opt.use_rd
use_rd_A = opt.use_rd_A
if use_rd_A and not use_rd:
    print('Can not use second reading discriminator without using first.')



rd_lr = opt.rd_lr
identity_loss_factor_A = opt.identity_loss_factor_A
gan_loss_factor_B2A = opt.gan_loss_factor_B2A
cycle_loss_factor_A = opt.cycle_loss_factor_A
identity_loss_factor_B = opt.identity_loss_factor_B
gan_loss_factor_A2B = opt.gan_loss_factor_A2B
cycle_loss_factor_B = opt.cycle_loss_factor_B
rd_loss_factor_B = opt.rd_loss_factor_B
rd_loss_factor_A = opt.rd_loss_factor_A
load_last_model = opt.load_last_model
rd_low_loss_learn = opt.rd_low_loss_learn
cycleloss_function = opt.cycleloss_function
regenerate = opt.regenerate
lowest_G_loss = 100
lowest_CER = 1
random_noise_factor = opt.noise
rd_pretrain_load = opt.rd_pretrain_load
resetRD = opt.resetRD

if 'LC' not in opt.source_dataset:
    forceLower = True
else:
    forceLower = False


from prettytable import PrettyTable

def count_parameters(model):
    table = PrettyTable(["Modules", "Parameters"])
    total_params = 0
    for name, parameter in model.named_parameters():
        if not parameter.requires_grad:
            continue
        param = parameter.numel()
        table.add_row([name, param])
        total_params+=param
    print(table)
    print(f"Total Trainable Params: {total_params}")
    return total_params


# Networks
netG_A2B = Generator(opt.input_nc, opt.output_nc)
netG_B2A = Generator(opt.output_nc, opt.input_nc)
netD_A = Discriminator(opt.input_nc)
netD_B = Discriminator(opt.output_nc)

rd, _ = InitStandardRD(wandb=None, nlr=rd_lr, rd_low_loss_learn=rd_low_loss_learn, load_model=rd_pretrain_load)

print('RD')
count_parameters(rd)


# Dataset loader
transforms_ = [ transforms.ToTensor()]
                #transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5)),
                #AddGaussianNoise(0., 0.001)

dataset = ImageDataset(opt.dataroot, transforms_=transforms_, unaligned=True, source_dataset= opt.source_dataset, target_dataset=opt.target_dataset)


dataloader = DataLoader(dataset, batch_size=opt.batchSize, shuffle=True, num_workers=opt.n_cpu)


# W & B init
wandb.init(project="cycleganrd", config={"rd_lr": rd_lr, "optimizer_lr" : opt.optimizer_lr,
                   "identity_loss_factor_A" : identity_loss_factor_A, "gan_loss_factor_B2A" : gan_loss_factor_B2A,
                   "cycle_loss_factor_A" : cycle_loss_factor_A, "identity_loss_factor_B" : identity_loss_factor_B,
                    "gan_loss_factor_A2B" : gan_loss_factor_A2B, "cycle_loss_factor_B" : cycle_loss_factor_B, "rd_loss_factor_A": rd_loss_factor_A,
                    "rd_loss_factor_B" : rd_loss_factor_B, 'rd_low_loss_learn' : rd_low_loss_learn,
                   "crops": opt.source_dataset, "extra" : 'Recrop the words before in reading discriminator + no regeneration after every epoch', #Binarization + Noise of fakeB to reconstructing A
                   "crop_number" : len(dataset.files_A), "iteration_number" : len(dataloader),
                   "load_last_model": load_last_model, 'cycleloss_function': cycleloss_function,
                                         'rd_model_name' : load_model_name, 'save_number' : save_number,
                                         'random_noise_factor' : random_noise_factor, "use_rd": use_rd,
                                         'use_rd_A': use_rd_A, 'rd_pretrain_load':  rd_pretrain_load, 'regenerate': regenerate, 'target_dataset': opt.target_dataset})
config = wandb.config

wandb.watch(netG_A2B)
wandb.watch(netG_B2A)
wandb.watch(netD_A)
wandb.watch(netD_B)

# Reading discriminator initialization
if use_rd:
    rd, _ = InitStandardRD(wandb=wandb,nlr=rd_lr, rd_low_loss_learn= rd_low_loss_learn, load_model=rd_pretrain_load)
    rd.saveModel(str(save_number) + '/rd_0.pt', model_path='/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/')
    if use_rd_A:
        rd_A, _ = InitStandardRD(wandb=wandb,nlr=0, rd_low_loss_learn= rd_low_loss_learn, load_model='GEN_EG_BG_LC.pt') #learning rate is 0 because its already perfectly pretrained on electronic and shouldn't adapt

if opt.cuda:
    netG_A2B.cuda()
    netG_B2A.cuda()
    netD_A.cuda()
    netD_B.cuda()


netG_A2B.apply(weights_init_normal)
netG_B2A.apply(weights_init_normal)
netD_A.apply(weights_init_normal)
netD_B.apply(weights_init_normal)


# Lossess
criterion_GAN = torch.nn.MSELoss()
if cycleloss_function == 'SSIM':
    criterion_cycle = pytorch_ssim.SSIM(window_size=12)
else:
    criterion_cycle = torch.nn.L1Loss()
criterion_identity = torch.nn.L1Loss()

# Optimizers & LR schedulers
optimizer_G = torch.optim.Adam(itertools.chain(netG_A2B.parameters(), netG_B2A.parameters()),
                                lr=opt.optimizer_lr, betas=(0.5, 0.999))
optimizer_D_A = torch.optim.Adam(netD_A.parameters(), lr=opt.optimizer_lr, betas=(0.5, 0.999))
optimizer_D_B = torch.optim.Adam(netD_B.parameters(), lr=opt.optimizer_lr, betas=(0.5, 0.999))

lr_scheduler_G = torch.optim.lr_scheduler.LambdaLR(optimizer_G, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)
lr_scheduler_D_A = torch.optim.lr_scheduler.LambdaLR(optimizer_D_A, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)
lr_scheduler_D_B = torch.optim.lr_scheduler.LambdaLR(optimizer_D_B, lr_lambda=LambdaLR(opt.n_epochs, opt.epoch, opt.decay_epoch).step)

# Inputs & targets memory allocation
Tensor = torch.cuda.FloatTensor if opt.cuda else torch.Tensor
input_A = Tensor(opt.batchSize, opt.input_nc, opt.size, opt.size)
input_B = Tensor(opt.batchSize, opt.output_nc, opt.size, opt.size)
target_real = Variable(Tensor(opt.batchSize).fill_(1.0), requires_grad=False)
target_fake = Variable(Tensor(opt.batchSize).fill_(0.0), requires_grad=False)

fake_A_buffer = ReplayBuffer()
fake_B_buffer = ReplayBuffer()


#generateCrops(3, '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/datasets/cropped_data/', just_generate=True, crop_path='train/A/')



# Loss plot
logger = Logger(opt.n_epochs, len(dataloader))



###################################
if load_last_model:
    netG_A2B.load_state_dict(torch.load('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/netG_A2B.pth'))
    netG_B2A.load_state_dict(torch.load('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/netG_B2A.pth'))
    netD_A.load_state_dict(torch.load('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/netD_A.pth'))
    netD_B.load_state_dict(torch.load('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/netD_B.pth'))
    if use_rd:
        rd.loadModel('rd.pt')

##########
trans = transforms.Compose(transforms_)
noise = transforms.Compose([ AddGaussianNoise(0., random_noise_factor)])

                #transforms.Normalize((0.5,0.5,0.5), (0.5,0.5,0.5)),
                #)
###### Training ######
for epoch in range(opt.epoch, opt.n_epochs):
    count = 0
    for i, batch in enumerate(dataloader):
        # Set model input
        # real_A = trans(cv2.normalize(cv2.imread('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/datasets/cropped_data/News2.png'), None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)).unsqueeze(0).cuda()
        real_A = Variable(input_A.copy_(batch['A']))
        real_B = Variable(input_B.copy_(batch['B']))

        ###### Generators A2B and B2A ######
        optimizer_G.zero_grad()

        # Identity loss
        # G_A2B(B) should equal B if real B is fed
        same_B = netG_A2B(real_B)
        loss_identity_B = criterion_identity(same_B, real_B) * identity_loss_factor_B
        # G_B2A(A) should equal A if real A is fed
        same_A = netG_B2A(real_A)
        loss_identity_A = criterion_identity(same_A, real_A) * identity_loss_factor_A


        # GAN loss
        fake_B = netG_A2B(real_A)

        pred_fake = netD_B(fake_B)
        loss_GAN_A2B = criterion_GAN(pred_fake.squeeze(1), target_real) * gan_loss_factor_A2B

        #fake_B = noise(fake_B.cpu()).cuda()

        fake_A = netG_B2A(real_B)


        pred_fake = netD_A(fake_A)
        loss_GAN_B2A = criterion_GAN(pred_fake.squeeze(1), target_real) * gan_loss_factor_B2A

        #fake_A = noise(fake_A.cpu()).cuda()
        #
        #fake_B_np = fake_B.detach().cpu().data.numpy()[0]
        # fake_B_shape = fake_B.shape
        # fake_B_np = image_resize(fake_B_np, channel=fake_B_shape[1], height=int((fake_B_shape[2]) / 2), width=int(fake_B_shape[3] / 2), order=0)
        # fake_B_np = image_resize(fake_B_np, channel=fake_B_shape[1], height=(fake_B_shape[2]), width=fake_B_shape[3], order=0)
        #np_img = np.transpose(fake_B_np, (1, 2, 0))
        #
        # # # #noise
        # fake_B_binary = fake_B_binary + torch.randn(fake_B_binary.size()) * 0.0001
        #np_img = fake_B.detach().squeeze(0).permute(1, 2, 0).cpu().numpy()
        #np_img = fake_B_rescaled.permute(1, 2, 0).cpu().numpy()
        #cv2.imwrite('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/fake_B_rescale.png', np_img*255)

        # fake_B_rescaled = torch.Tensor(fake_B_np).unsqueeze(0)

        #recovered_A = netG_B2A(fake_B)
        # np_img = fake_B_rescaled.permute(1, 2, 0).cpu().numpy()
        # cv2.imwrite('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/fake_B_rescale.png', np_img*255)
        if random_noise_factor != 0:
            recovered_A = netG_B2A(noise(fake_B.cpu()).cuda())
            recovered_B = netG_A2B(noise(fake_A.cpu()).cuda())
        else:
            recovered_A = netG_B2A(fake_B)
            recovered_B = netG_A2B(fake_A)
        # real_B_binary = torch.where(real_B.cpu() > 0.7, torch.ones(real_B.size()),  torch.zeros(real_B.size()))
        # real_A_binary = torch.where(real_A.cpu() > 0.7, torch.ones(real_A.size()),  torch.zeros(real_A.size()))
        # recovered_A_binary = torch.where(recovered_A.cpu() > 0.7, torch.ones(recovered_A.size()),  torch.zeros(recovered_A.size()))
        # recovered_B_binary = torch.where(recovered_B.cpu() > 0.7, torch.ones(recovered_B.size()),  torch.zeros(recovered_B.size()))

        # ssim is a quality measure, so a higher value is better, but for loss a lower value is better
        # so for ssim los the value is subtracted with one (https://research.nvidia.com/sites/default/files/pubs/2017-03_Loss-Functions-for/NN_ImgProc.pdf)
        if cycleloss_function == 'SSIM':
            loss_cycle_ABA = ((1 - criterion_cycle(recovered_A.cpu(), real_A.cpu())) * cycle_loss_factor_A).cuda()
            loss_cycle_BAB = ((1 - criterion_cycle(recovered_B.cpu(), real_B.cpu())) * cycle_loss_factor_B).cuda()
        else:
            loss_cycle_ABA = criterion_cycle(recovered_A, real_A) * cycle_loss_factor_A
            loss_cycle_BAB = criterion_cycle(recovered_B, real_B) * cycle_loss_factor_B




        if use_rd:
            rd_loss = 0
            rd_A_loss = 0
            word_array, info_array = cropWords(fake_B, csvfile=batch['A_csv'])
            word_array_A, _ = cropWords(recovered_A, csvfile=batch['A_csv'])

            for i in range(0, len(word_array)):
                if info_array[i] != 'l':
                    tens = resizeImg(word_array[i],(48, 128)).transpose(1, 3).transpose(2, 3)
                    loss, _ = rd.train(tens, (info_array[i],), 1)
                    try:
                        rd_loss += loss.data
                    except:
                        print('bla')
                    if use_rd_A:
                        tens_A = resizeImg(word_array_A[i], (48, 128)).transpose(1, 3).transpose(2, 3)
                        loss_A, _ = rd_A.train(tens_A, (info_array[i],), 1)
                        rd_A_loss += loss_A.data

            rd_loss = rd_loss/len(word_array) * rd_loss_factor_B
            if use_rd_A:
                rd_A_loss = rd_A_loss/len(word_array_A) * rd_loss_factor_A


        # Total loss
        loss_G = loss_identity_A + loss_identity_B + loss_GAN_A2B + loss_GAN_B2A + loss_cycle_ABA + loss_cycle_BAB
        if use_rd:
            loss_G += rd_loss
            if use_rd_A:
                loss_G += rd_A_loss
        loss_G.backward()
        
        optimizer_G.step()
        ###################################



        ###### Discriminator A ######
        optimizer_D_A.zero_grad()

        # Real loss
        pred_real = netD_A(real_A)
        loss_D_real = criterion_GAN(pred_real.squeeze(1), target_real)

        # Fake loss
        fake_A_buff = fake_A_buffer.push_and_pop(fake_A)
        pred_fake = netD_A(fake_A_buff.detach())
        loss_D_fake = criterion_GAN(pred_fake.squeeze(1), target_fake)

        # Total loss
        loss_D_A = (loss_D_real + loss_D_fake)*0.5
        loss_D_A.backward()

        optimizer_D_A.step()
        ###################################

        ###### Discriminator B ######
        optimizer_D_B.zero_grad()

        # Real loss
        pred_real = netD_B(real_B)
        loss_D_real = criterion_GAN(pred_real.squeeze(1), target_real)
        
        # Fake loss
        fake_B_buff = fake_B_buffer.push_and_pop(fake_B)
        pred_fake = netD_B(fake_B_buff.detach())
        loss_D_fake = criterion_GAN(pred_fake.squeeze(1), target_fake)

        # Total loss
        loss_D_B = (loss_D_real + loss_D_fake)*0.5
        loss_D_B.backward()

        optimizer_D_B.step()
        ###################################
        count += 1


        log_dict = {'loss_G': loss_G, 'loss_G_identity': (loss_identity_A + loss_identity_B),
                    'loss_G_GAN': (loss_GAN_A2B + loss_GAN_B2A),
                    'loss_G_cycle': (loss_cycle_ABA + loss_cycle_BAB), 'loss_D': (loss_D_A + loss_D_B) }


        if use_rd:
            if use_rd_A:
                log_dict.update({'loss_RD_all': (rd_loss + rd_A_loss)})
                try:
                    logger.log(log_dict, images={})
                except:
                    print('Log')
                log_dict.update({'loss_A_RD': rd_A_loss})

            else:
                log_dict.update({'loss_RD_all': rd_loss})
                try:
                    logger.log(log_dict, images={})
                except:
                    print('Log')
            log_dict.update({'loss_RD': rd_loss})
            if count == 1:  # (len(dataloader)-1): todo: change
                cer_path, cer_beam, wer_path, wer_beam, cer_beam_clean_hist, wer_beam_clean_hist = rd.testOnSaintGall(forceLower)
                log_dict.update({'CERp': cer_path, 'CERb': cer_beam, 'WERp': wer_path, 'WERb': wer_beam, 'CERbeam_clean_hist': cer_beam_clean_hist, 'WERbeam_clean_hist': wer_beam_clean_hist})
                if cer_beam < lowest_CER:
                    torch.save(netG_A2B.state_dict(),
                               '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(
                                   save_number) + '/best/netG_A2B.pth')
                    torch.save(netG_B2A.state_dict(),
                               '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(
                                   save_number) + '/best/netG_B2A.pth')
                    if use_rd:
                        rd.saveModel(str(save_number) + '/best/rd.pt',
                                     model_path='/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/')
                    lowest_CER = cer_beam
                    print('Best CER on epoch: ' + str(epoch))
        else:
            logger.log(log_dict, images={})

        log_dict.update({
                         'loss_identity_A': loss_identity_A, 'loss_identity_B': loss_identity_B,
                         'loss_GAN_A2B': loss_GAN_A2B, 'loss_GAN_B2A': loss_GAN_B2A,
                         'loss_cycle_ABA': loss_cycle_ABA, 'loss_cycle_BAB': loss_cycle_BAB,
                         'loss_D_A': (loss_D_A), 'loss_D_B': loss_D_B})




        if count % (10 + epoch) == 1:
            # np_img = fake_B.detach().squeeze(0).permute(1, 2, 0).cpu().numpy()
            # cv2.imwrite('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/fake_B2.png', np_img * 255)

            log_dict.update({
             'A -> B -> A': [wandb.Image(real_A, caption='real_A'), wandb.Image(fake_B, caption='fake_B'),
                             wandb.Image(recovered_A, caption='recovered_A')],
             'B -> A -> B': [wandb.Image(real_B, caption='real_B'), wandb.Image(fake_A, caption='fake_A'),
                             wandb.Image(recovered_B, caption='recovered_B')]})


        wandb.log(log_dict)



    # Update learning rates
    lr_scheduler_G.step()
    lr_scheduler_D_A.step()
    lr_scheduler_D_B.step()
    # if epoch % 10 == 1:
    #     rd_hist, _ = InitStandardRD(wandb=None, nlr=0.0001)
    #     rd_hist.testOnHistorical()
    #     for _ in range(8):
    #         dataloader_hist = DataLoader(
    #             ImageDataset('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/datasets/cropped_data/', transforms_=transforms_,
    #                          unaligned=True), batch_size=1, shuffle=True, num_workers=8)
    #         for i, batch in enumerate(dataloader_hist):
    #             real_A = Variable(input_A.copy_(batch['A']))
    #             fake_B = (netG_A2B(real_A).data)
    #             # np_img = fake_B.detach().squeeze(0).permute(1, 2, 0).cpu().numpy() * 255
    #             # cv2.imwrite('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/B/%04d.png' % (i + 1), np_img)
    #             word_array, info_array = cropWords(fake_B, csvfile=batch['A_csv'])
    #             for i in range(0, len(word_array)):
    #                 if info_array[i] != 'l':
    #                     # cv2.imwrite('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/word_' + str(i) + '.png', word_array[i]*255)
    #                     tens = resizeImg(word_array[i], (128, None)).transpose(1, 3).transpose(2, 3)
    #                     # np_img = tens.detach().squeeze(0).permute(1, 2, 0).cpu().numpy()
    #                     # cv2.imwrite('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/word_trans' + str(i) + '.png',
    #                     #             np_img * 255)
    #                     loss, _ = rd_hist.train(tens, (info_array[i],))
    #                     # rd.getResult(tens.squeeze(0))
    #                     # print(loss)
    #         rd_hist.testOnHistorical()
    # Save models checkpoints


    if epoch == 2 or epoch == 5 or ((epoch % 10) == 0 and not epoch == 0):
        os.mkdir('/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number) + '/' + str(epoch))
        torch.save(netG_A2B.state_dict(),
                   '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number) + '/' + str(epoch) + '/netG_A2B.pth')
        torch.save(netG_B2A.state_dict(),
                   '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number) + '/' + str(epoch) + '/netG_B2A.pth')
    if resetRD:
        if epoch == 20:
            if use_rd:
                rd.loadModel(str(save_number) + '/rd_0.pt',
                             model_path='/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/')

    lowest_G_loss = loss_G
    torch.save(netG_A2B.state_dict(), '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number) + '/netG_A2B.pth')
    # torch.save(model.state_dict(), os.path.join(wandb.run.dir, 'model.pt'))
    torch.save(netG_B2A.state_dict(), '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number) + '/netG_B2A.pth')
    torch.save(netD_A.state_dict(), '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number) + '/netD_A.pth')
    torch.save(netD_B.state_dict(), '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/' + str(save_number) + '/netD_B.pth')
    if use_rd:
        rd.saveModel( str(save_number) + '/rd.pt', model_path= '/HOME/pondenka/manuel/CycleGANRD/PyTorch-CycleGAN/output/')
    wandb.save('latest.pth')

    if regenerate:
        dataloader = DataLoader(ImageDataset(opt.dataroot, transforms_=transforms_, unaligned=True, source_dataset= opt.source_dataset), batch_size=opt.batchSize, shuffle=True, num_workers=opt.n_cpu)
###################################

